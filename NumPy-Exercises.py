#!/usr/bin/env python
# coding: utf-8

# # Упражнения с NumPy 
# 
# Давайте проверим ваши знания. Мы начнем с нескольких простых задач, а затем вам будут заданы несколько более сложных вопросов.
# 
# Важно! Код, который вы напишите в этом ноутбуке, вам нужно сохранить в виде файла c именем "Numpy_solutions.ipynb" в вашем личном репозитории на GitHub.

# #### 1. Импорт NumPy 

# In[6]:


import numpy as np


# #### 2. Создать массив из 10 нулей

# In[8]:


# Ваш код
np.zeros(10)


# In[2]:


# не пишите код в этой ячейке


# #### 3. Создать массив из 10 единиц

# In[9]:


np.ones(10)


# In[3]:


# не пишите код в этой ячейке


# #### 4. Создать массив из  10 пятерок

# In[11]:


np.ones(10)*5


# In[4]:


# не пишите код в этой ячейке


# #### 5. Создать массив из целых чисел от 10 до 50

# In[21]:


arr = np.arange (10,51) 
arr


# In[5]:


# не пишите код в этой ячейке


# #### 6. Создать массив из четных числел от 10 до 50

# In[23]:


arr = np.arange (10,51,2) 
arr


# In[6]:


# не пишите код в этой ячейке


# #### 7. Создать матрицу 3х3 с числами от 0 до 8

# In[25]:


arr = np.arange (0,9) 
arr = arr.reshape(3,3)
arr


# In[7]:


# не пишите код в этой ячейке


# #### 8. Создать единичную матрицу 3x3 

# In[28]:


np.eye(3) 


# In[8]:


# не пишите код в этой ячейке


# #### 9. Используйте NumPy для генерации случайного числа от 0 до 1
# <br>ПРИМЕЧАНИЕ. Значение вашего результата должно отличаться от приведенного ниже.

# In[46]:


np.random.rand(1,1)


# In[9]:


# не пишите код в этой ячейке


# #### Используйте NumPy для генерации массива из 25 случайных чисел, взятых из стандартного нормального распределения
# <br>ПРИМЕЧАНИЕ. Значение вашего результата должно отличаться от приведенного ниже.

# In[51]:


np.random.standard_normal(25)


# In[10]:


# не пишите код в этой ячейке


# #### 11. Создайте следующую матрицу:

# In[78]:


arr=np.arange(0.01,1.01,0.01) 
arr.reshape(10,10)


# In[11]:


# не пишите код в этой ячейке


# #### 12. Создайте массив из 20 линейно расположенных точек между 0 и 1:

# In[79]:


np.linspace(0,1,20)


# In[12]:


# не пишите код в этой ячейке


# ## Numpy индексация и выборка
# 
# Дана стартовая матрица (обязательно запустите ячейку ниже!). Вам необходимо повторить выходные результаты матрицы:

# In[13]:


# это наша стартовая матрица
mat = np.arange(1,26).reshape(5,5)
mat


# #### 13. Напишите код, который воспроизводит вывод, показанный ниже.
# 

# In[87]:


# CODE HERE
mat[2:,1:]


# In[14]:


# не пишите код в этой ячейке


# #### 14. Напишите код, который воспроизводит вывод, показанный ниже.

# In[90]:


mat[3,4]


# In[15]:


# не пишите код в этой ячейке


# #### 15. Напишите код, который воспроизводит вывод, показанный ниже.

# In[105]:


mat[:3,1] .reshape(3,1)


# In[16]:


# не пишите код в этой ячейке


# #### 16. Напишите код, который воспроизводит вывод, показанный ниже.

# In[112]:


mat[4,]


# In[17]:


# не пишите код в этой ячейке


# #### 17. Напишите код, который воспроизводит вывод, показанный ниже.

# In[118]:


mat[3:,]


# In[18]:


# не пишите код в этой ячейке


# ## Операции NumPy 

# #### 18. Получить сумму всех значений в матрице mat

# In[121]:


mat.sum ()


# In[19]:


# не пишите код в этой ячейке


# #### 19. Получить стандартное отклонение в матрице mat

# In[122]:


mat.std()


# In[20]:


# не пишите код в этой ячейке


# #### 20. Получить сумму значений в колонках в матрице mat

# In[124]:


mat.sum(axis=0)


# In[21]:


# не пишите код в этой ячейке


# ## Бонусный вопрос
# 
# Есть ли способ гарантировать, что мы всегда получим одинаковые случайные числа?

# In[142]:


np.random.seed(0)
np.random.rand(4)

